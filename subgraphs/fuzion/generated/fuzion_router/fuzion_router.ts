// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PaymasterCreated extends ethereum.Event {
  get params(): PaymasterCreated__Params {
    return new PaymasterCreated__Params(this);
  }
}

export class PaymasterCreated__Params {
  _event: PaymasterCreated;

  constructor(event: PaymasterCreated) {
    this._event = event;
  }

  get paymasterFactory(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get paymaster(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class PaymasterFactorySet extends ethereum.Event {
  get params(): PaymasterFactorySet__Params {
    return new PaymasterFactorySet__Params(this);
  }
}

export class PaymasterFactorySet__Params {
  _event: PaymasterFactorySet;

  constructor(event: PaymasterFactorySet) {
    this._event = event;
  }

  get paymasterFactory(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class fuzion_router extends ethereum.SmartContract {
  static bind(address: Address): fuzion_router {
    return new fuzion_router("fuzion_router", address);
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paymasterFactoryAvailable(_paymasterFactory: Address): boolean {
    let result = super.call(
      "paymasterFactoryAvailable",
      "paymasterFactoryAvailable(address):(bool)",
      [ethereum.Value.fromAddress(_paymasterFactory)],
    );

    return result[0].toBoolean();
  }

  try_paymasterFactoryAvailable(
    _paymasterFactory: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "paymasterFactoryAvailable",
      "paymasterFactoryAvailable(address):(bool)",
      [ethereum.Value.fromAddress(_paymasterFactory)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreatePaymasterCall extends ethereum.Call {
  get inputs(): CreatePaymasterCall__Inputs {
    return new CreatePaymasterCall__Inputs(this);
  }

  get outputs(): CreatePaymasterCall__Outputs {
    return new CreatePaymasterCall__Outputs(this);
  }
}

export class CreatePaymasterCall__Inputs {
  _call: CreatePaymasterCall;

  constructor(call: CreatePaymasterCall) {
    this._call = call;
  }

  get _paymasterFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _alias(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _initData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class CreatePaymasterCall__Outputs {
  _call: CreatePaymasterCall;

  constructor(call: CreatePaymasterCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetPaymasterFactoryCall extends ethereum.Call {
  get inputs(): SetPaymasterFactoryCall__Inputs {
    return new SetPaymasterFactoryCall__Inputs(this);
  }

  get outputs(): SetPaymasterFactoryCall__Outputs {
    return new SetPaymasterFactoryCall__Outputs(this);
  }
}

export class SetPaymasterFactoryCall__Inputs {
  _call: SetPaymasterFactoryCall;

  constructor(call: SetPaymasterFactoryCall) {
    this._call = call;
  }

  get _paymasterFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPaymasterFactoryCall__Outputs {
  _call: SetPaymasterFactoryCall;

  constructor(call: SetPaymasterFactoryCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
